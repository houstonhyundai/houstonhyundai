var SaveThings=function(){function s(t){var i=window.open(this.api_url+this.login_path+"?s="+this.social,"_new","width=680,height=310,toolbar=0,scrollbars=1,status=0,resizable=0,location=0,menuBar=0,left=30,top=50"),a=setInterval(function(){try{i&&i.document.domain===document.domain?leftDomain&&"complete"===i.document.readyState&&(clearInterval(a),i.postMessage({message:"requestResult"},"*")):leftDomain=!0}catch(e){if(i.closed)return clearInterval(a),void r(t);leftDomain=!0}},1e3)}function i(e,t){jQuery.ajax({url:this.api_url+"/login/email/force?email="+e+"&iframe=true",dataType:"jsonp",cache:!1}).always(function(e){void 0!==e.id&&e.id&&0<e.id.length&&(function(e,t,i){var a="";if(i){var s=new Date;s.setTime(s.getTime()+24*i*60*60*1e3),a="; expires="+s.toGMTString()}else a="";"object"==typeof t&&(t=JSON.stringify(t)),document.cookie=escape(e)+"="+escape(t)+a+"; path=/"}("savethings_hash",e.id,30),t&&r(t))})}function n(t){try{var i=new CustomEvent(t)}catch(e){(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!0)}document.dispatchEvent(i)}function r(t,i){var a=this;post_data=jQuery.extend({},o()),jQuery.ajax({url:this.api_url+"/login/check",dataType:"jsonp",cache:!1,data:post_data}).always(function(e){e&&e.id?(a.logged_in=!0,jQuery(".savethings-login").remove(),jQuery(document).ready(function(){}),void 0!==t&&(t(),jQuery("body").trigger("savethings-logged-in"))):(a.logged_in=!1,l(),void 0!==i&&(i(),jQuery("body").trigger("savethings-auth-failed"))),jQuery("body").trigger("savethings-auth-completed")})}function o(){var e={},t=function(e){var t=document.cookie,i=t.indexOf(" "+e+"=");if(-1==i&&(i=t.indexOf(e+"=")),-1==i)t=null;else{i=t.indexOf("=",i)+1;var a=t.indexOf(";",i);-1==a&&(a=t.length),t=unescape(t.substring(i,a))}return t||null}("savethings_hash");return void 0!==t&&t&&0<t.length&&(e.hash=t),e}function l(){jQuery(".savethings-logout").remove(),jQuery(function(){if(0==jQuery(".savethings-login").length){var e=jQuery('<button class="button primary-button block">'+savethings.translate.login+"</button>").text(savethings.translate.login_to_save).addClass("savethings-login").css({width:"100%"});jQuery(".initial-saved-vehicles").prepend(e)}jQuery(".button.savethings-login").on("click",function(){SaveThings.authPopup(loadSavedItems)})})}if(this.api_url="https://savevehicles.dealerinspire.com",this.site_id=-1,this.logged_in=!1,this.login_path="/login",this.social="y",void 0!==window.savethings)return function(){this.site_id=window.savethings.site_id,this.api_url=window.savethings.url||this.api_url,this.login_path=window.savethings.login_path||this.login_path,this.social=window.savethings.social||this.social,r()}(),{authPopup:function(e){s(e)},authWithEmail:function(e,t){i(e,t)},checkAuth:function(e,t){r(e,t)},list:function(){return function(){return post_data=jQuery.extend(o(),{site_id:this.site_id}),jQuery.ajax({url:this.api_url+"/items",data:post_data,dataType:"jsonp"}).always(function(){jQuery("body").trigger("savethings-list-complete")})}()},logout:function(){!function(){jQuery.ajax({url:this.api_url+"/signout",dataType:"jsonp",cache:!1}).always(function(e){l()})}()},save:function(e,t,i){!function e(t,i,a){post_data=jQuery.extend(o(),{site_id:this.site_id},t),this.logged_in?jQuery.ajax({url:this.api_url+"/items/add",data:post_data,dataType:"jsonp",success:function(e){void 0!==i&&(n("add-saved-vehicle"),i())},error:function(){void 0!==a&&a()}}):s(function(){e(t,i,a)})}(e,t,i)},remove:function(e,t,i){!function(e,t,i){post_data=jQuery.extend(o(),{site_id:this.site_id,remote_id:e}),jQuery.ajax({url:this.api_url+"/items/remove",data:post_data,dataType:"jsonp",success:function(e){void 0!==t&&(n("remove-saved-vehicle"),t())},error:function(){void 0!==i&&i()}})}(e,t,i)}}}(),existingItems=[],existingItemIDs=[],loadSavedItems=function(){SaveThings.list().success(insertSavedItems)},insertSavedItems=function(e){0<e.items.length&&jQuery(".save-vehicles .initial-saved-vehicles").remove(),jQuery.each(e.items,function(e,t){existingItemIDs.push(t.remote_id),jQuery(".save-vehicles").append('<div class="vehicle saved-'+t.remote_id+' "><h5><img src="/wp-content/plugins/inventory/js/fancybox/fancy_close.png" alt="close" class="remove-saved-vehicle" data-remote-id="'+t.remote_id+'" style="vertical-align:middle"> <a href="'+t.url+'">'+t.title+'</a></h5><a href="'+t.url+'"><span class="sr-hidden">'+t.title+'</span><img class="thumbnail" src="'+t.thumbnail_url+'" alt="'+t.title+'" /></a></div>'),jQuery("body").trigger("savethings-drawer-loaded")})};function markSavedItems(){var e=jQuery("#results-page").length?"savethings-list-complete savethings-drawer-loaded vrp-ready vrp-ajax-complete":"savethings-list-complete savethings-drawer-loaded",i=jQuery("#results-page").length;jQuery(".project-hotwheels").length;jQuery("body").on(e,function(){var e=jQuery("#save-vehicles-sidr"),t=jQuery("[data-remote-id]",e),s=[];e.length&&jQuery(t).each(function(e,t){s.push(jQuery(this).data("remote-id"))}),i?jQuery(".vehicle").each(function(e,t){var i=jQuery(this).find(".save-things-save"),a=jQuery(i).attr("rel");-1<jQuery.inArray(a,s)&&(jQuery(i).addClass("save-things-saved"),jQuery(i).find(".button-text").text("Saved"))}):jQuery(".save-vehicle").each(function(e,t){var i=jQuery(this).data("remote-id");-1<$.inArray(i,s)&&jQuery(this).addClass("save-things-saved").find(".button-text").text("Saved")}),0<s.length&&jQuery("#save-vehicles-expand-btn, #save-vehicles-custom-toggle, .mobile-tab.saved").addClass("vehicles-saved")})}jQuery(function(){if(void 0!==window.savethings){var e=jQuery("#save-vehicles-expand-btn, #save-vehicles-custom-toggle");jQuery("#save-vehicles-expand-btn, #save-vehicles-custom-toggle").sidr({name:"save-vehicles-sidr",side:savethings.position,onOpen:function(){"left"==savethings.position?jQuery(e).animate({marginLeft:260},200):jQuery(e).animate({marginRight:260},200)},onClose:function(){"left"==savethings.position?jQuery(e).animate({marginLeft:0},200):jQuery(e).animate({marginRight:0},200)}}),jQuery(document).on("click",".remove-saved-vehicle",function(e){if(void 0!==window.savethings){var t=this,i=jQuery(this).data("remoteId");SaveThings.remove(jQuery(this).data("remoteId"),function(){jQuery(t).html(savethings.translate.save_this_vehicle).removeClass("saved-thing"),jQuery(".save-vehicles div.saved-"+i).fadeOut(140,function(){jQuery(this).remove()})})}}),jQuery(document).on("click",function(e){var t=e.target;void 0!==jQuery.sidr&&jQuery(t).parents(".sidr").length<1&&!jQuery(t).hasClass("sidr")&&jQuery.sidr("close","save-vehicles-sidr")}),jQuery(document).on("click",".save-things-save",function(e){if(void 0!==window.savethings){e.preventDefault();var s=this,t=jQuery(this).data("title"),i=jQuery(this).data("thumbnailUrl"),a=jQuery(this).data("amount"),n=jQuery(this).data("url"),r=jQuery(this).data("remoteId"),o=jQuery(".save-vehicles"),l=jQuery(o).find(".saved-"+r),u=!!jQuery("#results-page").length;VDPid=0<jQuery(".project-hotwheels").length?jQuery("#vehicleDetails"):jQuery("#detailspage"),SaveThings.save({title:t,thumbnail_url:i,amount:a,url:n,remote_id:r},function(){var e=u?jQuery(s).parents(".vehicle").find(".vehicle-image img"):jQuery(VDPid).find("#gallery-carousel img, #condensed-gallery-carousel img").first(),t=jQuery(e).attr("src"),i=jQuery(s).data("title")?jQuery(s).data("title"):jQuery(s).closest(".vehicle").find(".vehicle-overview").attr("title");if(0===l.length&&void 0!==e&&0<e.length){var a=e.clone().offset({top:e.offset().top,left:e.offset().left}).css({opacity:"0.5",position:"absolute",height:"150px",width:"150px","z-index":"100"}).appendTo(jQuery("body"));"left"==savethings.position?a.animate({top:o.offset().top+100,left:o.offset().left+10,width:150,height:150,zIndex:1e4},1e3,"easeOutQuart",function(){jQuery(".initial-saved-vehicles",o).remove(),jQuery(o).append('<div class="vehicle saved-'+r+'"><h5><img src="/wp-content/plugins/inventory/js/fancybox/fancy_close.png" class="remove-saved-vehicle" data-remote-id="'+r+'" style="vertical-align:middle"> <a href="'+n+'">'+i+'</a></h5><a href="'+n+'"><img class="thumbnail" src="'+t+'" /></a></div>')}):a.animate({top:o.offset().top+100,left:jQuery(window).width()-10,width:150,height:150,zIndex:1e4},1e3,"easeOutQuart",function(){jQuery(".initial-saved-vehicles",o).remove(),jQuery(o).append('<div class="vehicle saved-'+r+'"><h5><img src="/wp-content/plugins/inventory/js/fancybox/fancy_close.png" class="remove-saved-vehicle" data-remote-id="'+r+'" style="vertical-align:middle"> <a href="'+n+'">'+i+'</a></h5><a href="'+n+'"><img class="thumbnail" src="'+t+'" /></a></div>')}),a.animate({width:0,height:0},function(){jQuery(this).detach()}),jQuery(s).addClass("save-things-saved"),jQuery("#save-vehicles-expand-btn, #save-vehicles-custom-toggle, .mobile-tab.saved").addClass("vehicles-saved"),jQuery("body").trigger("savethings-save-vehicle",s)}},function(){})}}),jQuery("body").on("vrp-ajax-complete",function(){var e=jQuery("#save-vehicles-expand-btn");setTimeout(function(){jQuery(e).show(),jQuery(e).sidr({name:"save-vehicles",side:"left",onOpen:function(){jQuery(e).animate({marginLeft:260},200)},onClose:function(){jQuery(e).animate({marginLeft:0},200)}})},500)}),loadSavedItems(),markSavedItems()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
